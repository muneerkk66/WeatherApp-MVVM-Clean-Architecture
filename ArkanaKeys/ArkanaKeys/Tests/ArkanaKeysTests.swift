// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

@testable import ArkanaKeys
import ArkanaKeysInterfaces
import Foundation
import XCTest

final class KeysTests: XCTestCase {
    private var salt: [UInt8]!
    private var globalSecrets: KeysGlobalProtocol!

    override func setUp() {
        super.setUp()
        salt = [
            0x5F, 0x82, 0xC1, 0x20, 0x5B, 0xD9, 0xF5, 0x4D, 0x1C, 0x5B, 0xD4, 0x6D, 0xB0, 0xD7, 0xA4, 0x69, 0xD6, 0x2A, 0x60, 0x18, 0xD5, 0x4, 0x52, 0x76, 0x41, 0xA3, 0xE4, 0xE8, 0x30, 0xA5, 0x89, 0x4B, 0x51, 0x32, 0xF5, 0x1B, 0xE9, 0x88, 0x67, 0x3A, 0x5A, 0xF0, 0x1A, 0xAD, 0x92, 0x2C, 0x6E, 0xB1, 0xD3, 0x4, 0xFC, 0x6, 0x8C, 0xA6, 0x3E, 0x73, 0x2B, 0x7A, 0x2A, 0x9E, 0x4A, 0xDD, 0xF9, 0x7F,
        ]
        globalSecrets = Keys.Global()
    }

    override func tearDown() {
        globalSecrets = nil
        salt = nil
        super.tearDown()
    }

    func test_decodeRandomHexKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x6C, 0xE4, 0xA4, 0x44, 0x3E, 0xE1, 0x96, 0x2C, 0x28, 0x6A, 0xB5, 0x58, 0x85, 0xB4, 0xC1, 0x5D, 0xE7, 0x4B, 0x51, 0x2C, 0xE1, 0x62, 0x61, 0x4E, 0x73, 0xC0, 0x80, 0xD0, 0x6, 0xC6, 0xE8, 0x72, 0x63, 0x53, 0xCD, 0x29, 0x8F, 0xBB, 0x4, 0x8, 0x68, 0xC0, 0x79, 0xCF, 0xAB, 0x4F, 0xD, 0xD3, 0xE3, 0x62, 0xCB, 0x34, 0xEE, 0x93, 0x5C, 0x47, 0x48, 0x4F, 0x1A, 0xA6, 0x7C, 0xBF, 0xCD, 0x1A, 0x3B, 0xE7, 0xF0, 0x13, 0x69, 0xBF, 0xCC, 0x7E, 0x2E, 0x6A, 0xE2, 0x5B, 0x82, 0xE2, 0x96, 0xC, 0xE1, 0x1B, 0x2, 0x7D, 0xE1, 0x30, 0x34, 0x10, 0x71, 0xC2, 0xD4, 0x8B, 0x4, 0x93, 0xED, 0x2A, 0x62, 0x51, 0xCC, 0x2E, 0xDA, 0xEB, 0x1, 0xD, 0x39, 0x96, 0x28, 0x9D, 0xA7, 0x1A, 0x8, 0xD3, 0xE4, 0x35, 0xCE, 0x63, 0xBD, 0x9F, 0x5D, 0x47, 0x18, 0x4A, 0x13, 0xAA, 0x2E, 0xEF, 0x9F, 0x1D,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "3fede8ca41a55ce41a144f382cd86ca92a82f3c220cb9ccb0f72b5b4c5086b4ede132f932166252e71be44ff0a0c46da3c953cf7cf2056fb712e19c43094d2fb")
    }

    func test_decodeRandomBase64Key_shouldDecode() {
        let encoded: [UInt8] = [
            0x14, 0xF3, 0xB3, 0x67, 0x6E, 0xF2, 0x8C, 0x20, 0x7E, 0xF, 0xA7, 0x27, 0xD3, 0xE0, 0xD6, 0x6, 0xF9, 0x68, 0x35, 0x5E, 0xA4, 0x48, 0x27, 0x3A, 0xA, 0xCD, 0x8A, 0x99, 0x6A, 0x95, 0xD9, 0x7C, 0x39, 0x6B, 0xA4, 0x2A, 0x82, 0xCE, 0x31, 0x52, 0x14, 0x9D, 0x79, 0xCF, 0xC7, 0x45, 0x5A, 0xD4, 0xB0, 0x6E, 0xB6, 0x6B, 0xFE, 0xE3, 0x46, 0x43, 0x1D, 0x2D, 0x12, 0xD8, 0xE, 0xA5, 0xB4, 0x37, 0x33, 0xE3, 0xBB, 0x4B, 0x1C, 0xA3, 0x86, 0x26, 0x52, 0x17, 0xB8, 0x54, 0xD2, 0x94, 0x96, 0x6, 0xA4, 0x60, 0x2E, 0x28, 0xFE, 0x55, 0x6F, 0x4B,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "KqrG5+ymbTsJc7ro/BUFqLuLKnnqZ0P7hYQ1kFVhNmcbUi4ecjJmrEx06W8FDxMHlazkGzskNLl9bC2orJN0+Q==")
    }

    func test_decodeUUIDKey_shouldDecode() {
        let encoded: [UInt8] = [
            0x6C, 0xB1, 0xA7, 0x19, 0x3A, 0xEA, 0x94, 0x7F, 0x31, 0x6C, 0xEC, 0x5B, 0x81, 0xFA, 0x90, 0x8, 0xEE, 0x1C, 0x4D, 0x79, 0xE5, 0x62, 0x6A, 0x5B, 0x76, 0xC7, 0xDC, 0x8C, 0x51, 0xC6, 0xBB, 0x73, 0x61, 0xB, 0x97, 0x79,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "33f9a3a2-7861-4a86-a0f8-7d8dac2809bb")
    }

    func test_decodeTrueBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x2B, 0xF0, 0xB4, 0x45,
        ]
        XCTAssertTrue(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeFalseBoolValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x39, 0xE3, 0xAD, 0x53, 0x3E,
        ]
        XCTAssertFalse(Keys.decode(encoded: encoded, cipher: salt))
    }

    func test_decodeIntValue_shouldDecode() {
        let encoded: [UInt8] = [
            0x6B, 0xB0,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), 42)
    }

    func test_decodeIntValueWithLeadingZeroes_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x6F, 0xB2, 0xF1, 0x11,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "0001")
    }

    func test_decodeMassiveIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x66, 0xB0, 0xF3, 0x13, 0x68, 0xEE, 0xC7, 0x7D, 0x2F, 0x6D, 0xEC, 0x58, 0x84, 0xE0, 0x93, 0x5C, 0xEE, 0x1A, 0x57, 0x21, 0xE7, 0x36, 0x61, 0x45, 0x76, 0x91, 0xD4, 0xDB, 0x6, 0x9D, 0xBC, 0x7F, 0x66, 0x5, 0xC0, 0x23, 0xD9, 0xBF,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "92233720368547758079223372036854775807")
    }

    func test_decodeNegativeIntValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x72, 0xB6, 0xF3,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "-42")
    }

    func test_decodeFloatingPointValue_shouldDecodeAsString() {
        let encoded: [UInt8] = [
            0x6C, 0xAC, 0xF0, 0x14,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "3.14")
    }

    func test_encodeAndDecodeValueWithDollarSign_shouldDecode() {
        let encoded: [UInt8] = [
            0x2D, 0xE7, 0xA0, 0x4C, 0x4, 0xFD, 0x99, 0x24, 0x71, 0x4, 0xA7, 0x5, 0xD1, 0xB3, 0xDD,
        ]
        XCTAssertEqual(Keys.decode(encoded: encoded, cipher: salt), "real_$lim_shady")
    }
}
