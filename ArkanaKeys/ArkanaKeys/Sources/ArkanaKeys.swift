// DO NOT MODIFY
// Automatically generated by Arkana (https://github.com/rogerluan/arkana)

import ArkanaKeysInterfaces
import Foundation

public enum Keys {
    @inline(__always)
    fileprivate static let salt: [UInt8] = [
        0x5F, 0x82, 0xC1, 0x20, 0x5B, 0xD9, 0xF5, 0x4D, 0x1C, 0x5B, 0xD4, 0x6D, 0xB0, 0xD7, 0xA4, 0x69, 0xD6, 0x2A, 0x60, 0x18, 0xD5, 0x4, 0x52, 0x76, 0x41, 0xA3, 0xE4, 0xE8, 0x30, 0xA5, 0x89, 0x4B, 0x51, 0x32, 0xF5, 0x1B, 0xE9, 0x88, 0x67, 0x3A, 0x5A, 0xF0, 0x1A, 0xAD, 0x92, 0x2C, 0x6E, 0xB1, 0xD3, 0x4, 0xFC, 0x6, 0x8C, 0xA6, 0x3E, 0x73, 0x2B, 0x7A, 0x2A, 0x9E, 0x4A, 0xDD, 0xF9, 0x7F,
    ]

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> String {
        return String(decoding: encoded.enumerated().map { offset, element in
            element ^ cipher[offset % cipher.count]
        }, as: UTF8.self)
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Bool {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Bool(stringValue)!
    }

    static func decode(encoded: [UInt8], cipher: [UInt8]) -> Int {
        let stringValue: String = Self.decode(encoded: encoded, cipher: cipher)
        return Int(stringValue)!
    }
}

public extension Keys {
    struct Global: KeysGlobalProtocol {
        public init() {}

        @inline(__always)
        public let appId: String = {
            let encoded: [UInt8] = [
                0x6D, 0xB4, 0xF0, 0x14, 0x6C, 0xBF, 0x93, 0x7C, 0x2D, 0x62, 0xB0, 0x9, 0x89, 0xE6, 0xC1, 0x5D, 0xE6, 0x12, 0x3, 0x2A, 0xE0, 0x37, 0x63, 0x17, 0x77, 0x97, 0x80, 0x8E, 0x7, 0xC1, 0xEA, 0x7C,
            ]
            return Keys.decode(encoded: encoded, cipher: Keys.salt)
        }()
    }
}

public extension Keys {
    struct Debug: KeysEnvironmentProtocol {
        public init() {}
    }
}

public extension Keys {
    struct Release: KeysEnvironmentProtocol {
        public init() {}
    }
}
